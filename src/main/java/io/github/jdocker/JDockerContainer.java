/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package io.github.jdocker;

import com.spotify.docker.client.messages.ContainerInfo;
import com.spotify.docker.client.messages.ContainerState;

/**
 * Structure that allows to identify a container globally.
 */
public interface JDockerContainer {

    /**
     * Get the {@link ContainerInfo} of this container.
     * @return the {@link ContainerInfo}
     */
    ContainerInfo getContainerInfo();

    /**
     * Get the docker host name.
     * @return the host name, not null.
     */
    String getHostName();

    /**
     * Get access to the host instance.
     * @return the host accessor.
     */
    default JDockerHost getHost(){
        return Machines.getDockerHost(getHostName());
    }

    /**
     * Get the container's id, used for identifying the container throughout the system.
     * @return the container's id
     */
    default String getId(){
        return getContainerInfo().id();
    }

    /**
     * Get the container's name either set by {@code --name someName} or auto-generated by the docker runtime.
     * @return the container's name, not null.
     */
    default String getName(){
        return getContainerInfo().name();
    }

    /**
     * Get the name of the underlying docker image.
     * @return the image name.
     */
    default String getImage(){
        return getContainerInfo().image();
    }

    /**
     * Get the docker machine driver used.
     * @return the machine driver.
     */
    default String getDriver(){
        return getContainerInfo().driver();
    }

    /**
     * Get the current container state.
     * @return the current container state.
     */
    default ContainerState getState(){
        return getContainerInfo().state();
    }

    /**
     * Get the current container IP.
     * @return the current IP.
     */
    default String getIPAddress(){
        return getContainerInfo().networkSettings().ipAddress();
    }

    /**
     * Get the container MAC address.
     * @return the MAC address.
     */
    default String getMacAddress(){
        return getContainerInfo().networkSettings().macAddress();
    }

    /**
     * Get information on the ports and mappings in place.
     * @return the ports info, not null.
     */
    default String getPortsInfo(){
        return String.valueOf(getContainerInfo().networkSettings().ports());
    }


}
